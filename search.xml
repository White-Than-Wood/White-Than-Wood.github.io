<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>think of testing</title>
      <link href="/2022/05/28/thinkoftesting/"/>
      <url>/2022/05/28/thinkoftesting/</url>
      
        <content type="html"><![CDATA[<h1 id="测试-testing"><a href="#测试-testing" class="headerlink" title="测试(testing)"></a>测试(testing)</h1><h2 id="跨终端自动化测试"><a href="#跨终端自动化测试" class="headerlink" title="跨终端自动化测试"></a>跨终端自动化测试</h2><p>  在介绍自动化测试之前,先来说一下跨终端测试工具,基于全方位测试需求的考虑,跨终端测试应该是最重要的类型之一.如今,各种类型的浏览器、操作系统、品牌手机以及设备可谓是琳琅满目.因此,需要确保用户在通过不同种类的浏览器、操作系统、品牌手机以及设备访问平台服务时,不会产生较大的体验落差.</p><p>  在市面上,诸如LambdaTest之类的在线工具,就能够帮助以一种轻松互动的方式,解决此方面的问题.LambdaTest是一种非常流行的在线工具,可以通过它对超过3000多个真正的浏览器、操作系统、品牌手机以及设备进行跨终端式的测试.测试人员甚至可以使用该工具来自动捕捉屏幕上的截图,以加速对于目标平台网络布局的测试.另外,其他同类型比较流行的测试工具还有:Browserstack和Saucelabs.</p><h3 id="lambdaTest"><a href="#lambdaTest" class="headerlink" title="lambdaTest"></a>lambdaTest</h3><p>  lambdaTest能够为3000多种浏览器、不同的Web应用操作系统、品牌手机以及设备的组合提供支持,可以在线执行手动测试(Manual testing)、自动化测试(Automatic testing)以及真机测试Real Device testing).</p><blockquote><p>手动测试(Manual testing)</p></blockquote><ul><li><p>Browser Testing.</p><p>可在线在不同的浏览器种类、版本、操作系统以及分辨率对线上网站进行实时交互式测试,每次真实浏览器sessions可测试10分钟,在测试期间可切换配置浏览器种类、版本、操作系统以及分辨率、可录屏(录屏可下载)、可标记bug(编辑bug截图、下载bug截图以及上传到lambdaTest衍生的SLACK、JIRA和ASANA项目管理系统).</p><ul><li><p>配置.</p><p><img src="https://image.white-than-wood.zone/lambdaTest/Manual/browser/Manual_home.png"></p></li><li><p>测试.</p><p><img src="https://image.white-than-wood.zone/lambdaTest/Manual/browser/Manual_testing.png"></p></li><li><p>Debug.</p><p><img src="https://image.white-than-wood.zone/lambdaTest/Manual/browser/Manual_debug.png"></p></li><li><p>录屏.</p><p><img src="https://image.white-than-wood.zone/lambdaTest/Manual/browser/Manual_video.png"></p></li></ul></li><li><p>App Testing.</p><p>可在线自由搭配不同的品牌手机、版本设备对App包或者App Url进行实时交互式测试,每次真机测试sessions可测试10分钟,在测试期间可切换配置品牌手机以及版本设备、可录屏(录屏可下载)、可标记bug(编辑bug截图、下载bug截图以及上传到lambdaTest衍生的SLACK、JIRA和ASANA项目管理系统).</p><ul><li><p>配置.</p><p><img src="https://image.white-than-wood.zone/lambdaTest/Manual/app/Manual_home.png"></p></li><li><p>测试.</p><p><img src="https://image.white-than-wood.zone/lambdaTest/Manual/app/Manual_testing.png"></p></li><li><p>Debug.</p><p><img src="https://image.white-than-wood.zone/lambdaTest/Manual/app/Manual_debug.png"></p></li><li><p>录屏.</p><p><img src="https://image.white-than-wood.zone/lambdaTest/Manual/app/Manual_video.png"></p></li></ul></li><li><p>Browser Testing开发环境在线测试.</p><p>可配合lambdaTest桌面应用(LT_Windows or LT_Macs)配合在线网站进行开发环境在线测试.</p><ul><li><p>配置.</p><p><a href='https://www.lambdatest.com/support/docs/testing-locally-hosted-pages/'>Browser Testing开发环境在线测试</a>. PS:注意看视频中的介绍步骤.</p></li></ul></li><li><p>结论.</p><p>lambdaTest手动测试简洁、易用且容易理解;测试过程流畅、无障碍性困难;功能完备,在线随时切换终端设备配置、录屏下载、Debug标记等应有尽有;其衍生的生态是成熟且完备的,例如其衍生的一套项目管理系统SLACK、JIRA和ASANA.</p><p>对于测试人员来说,无论是生产环境、开发环境和App包,如果尝试自己查看每个浏览器、操作系统、品牌手机以及设备,是一项非常繁琐的工作,但lambdaTest都可在线简捷做各种搭配兼容测试,提高了效率,大大节约了时间成本.</p></li><li><p>问题.</p><p>现阶段lambdaTest上手动测试中大部分浏览器版本、操作系统、品牌手机以及版本设备都是不开放的,开放的很小的部分仅仅也是为了给用户进行体验的,如果需要开放就需要付费,另外支出成本.</p></li></ul><blockquote><p>自动化测试(Automatic testing)</p></blockquote><p>  众所周知,软件测试人员平时的工作量既多且复杂.因此,为了给他们减负,以及加快测试周期,各种高效率的自动化测试工具往往是必须的.</p><ul><li><p>浏览器自动化操作标准-WebDriver.</p><p>WebDriver是W3C的一个标准,是一个远程控制协议,它提供了跨平台和跨语言的方式来远程操控浏览器;提供了一系列接口来访问和操作DOM,进而控制浏览器的行为,使web开发者能写一些自动化脚本来测试网页.后续的Selenium、Appium都是基于WebDriver协议并进行了扩展.</p><ul><li><p>WebDriver的工作过程.</p><p>浏览器在启动后会在某一个端口启动基于WebDriver协议的Web Service,接下来调用WebDriver的任何api时,都需要借助一个CommandExecutor发送一个命令(也就是给监听端口上的Web Service发送一个http请求),这个命令会告诉浏览器接下来要做什么.</p><p><img src="https://image.white-than-wood.zone/lambdaTest/Automatic/Automatic_webdriver.png"></p></li></ul></li><li><p>浏览器自动化测试工具.</p><ul><li><p>Selenium.</p><p>Selenium是浏览器自动化测试工具领域最为流行的一种测试套件,根据《针对自动化测试各种挑战的调查》一文,九成的测试人员已经或正在使用着Selenium;</p><ul><li>Selenium支持多浏览器平台(Chrome、Firefox、IE、Opera、Safari等);</li><li>Selenium支持多语言(python、java、ruby、js、c#等);</li><li>Selenium的Remote Control可以通过录制用户的操作,来简化Web测试人员的各项重复作业;</li><li>Selenium的Grid具有编写、运行和并行处理测试的功能;</li><li>Selenium的Core则是基于JsUnit,完全由JavaScript所编写,因此可以被运行在各种支持JavaScript的主流浏览器之上;</li><li>Selenium开源免费;</li></ul></li><li><p>Selenium IDE.</p><p>Selenium IDE能够以插件的形式被安装到测试者的浏览器中,从而方便地实现Web界面的测试,lambdaTest在浏览器自动化测试部分也极力推荐Selenium.</p></li><li><p>lambdaTest配合Selenium IDE.</p><ul><li><p>配置.</p><p>使用Selenium IDE以及配合lambdaTest的配置还是比较简单的,官方有具体的一步一步实现的文章: <a href='https://www.lambdatest.com/support/docs/run-selenium-ide-tests-on-lambdatest-selenium-cloud-grid/'>Run Selenium IDE Tests with LambdaTest Selenium Grid</a>.</p></li><li><p>selenium-side-runner命令行配合lambdaTest.</p><p>使用selenium-side-runner依赖包在命令行中运行导出的Selenium IDE测试套件,在lambdaTest在线平台上搭配不同的浏览器版本、浏览器类型、操作系统、品牌手机以及版本设备进行生成自动化测试录屏.</p><ul><li>可根据selenium-webdriver事件步骤分帧在录屏中在线查看测试套件自动化测试的情况;</li><li>可在线查看在自动化测试过程当中网络资源接口的加载情况;</li><li>可下载自动化测试的录屏;</li><li>可将标记bug(将有问题的selenium事件步骤分帧上传到lambdaTest衍生的SLACK、JIRA和ASANA项目管理系统);</li></ul></li><li><p>生成.</p><p><img src="https://image.white-than-wood.zone/lambdaTest/Automatic/Automatic_generate.png"></p><p>运行命令:</p><pre><code>npm run test</code></pre><p>生成自动化测试录屏列表.</p><p><img src="https://image.white-than-wood.zone/lambdaTest/Automatic/Automatic_view.png"></p><p>查看自动化测试录屏详情.</p><p><img src="https://image.white-than-wood.zone/lambdaTest/Automatic/Automatic_detail.png"></p></li><li><p>下载.</p><p><img src="https://image.white-than-wood.zone/lambdaTest/Automatic/Automatic_video.png"></p></li><li><p>Debug.</p><p><img src="https://image.white-than-wood.zone/lambdaTest/Automatic/Automatic_debug.png"></p></li><li><p>网络资源接口加载情况.</p><p><img src="https://image.white-than-wood.zone/lambdaTest/Automatic/Automatic_network.png"></p></li><li><p>结论.</p><p>Selenium IDE确实是测试工具领域最为流行的一种可视化、自动化测试工具,作为Chrome extensions,无需编辑一行代码就可实现可视化、自动化测试,可视化编辑测试用例流畅并且效果顶级.</p><p>而lambdaTest在线自动化测试更是与Selenium配合的相得益彰,做到了跨浏览器自动化可视化测试完备且成熟的流程,在不同的浏览器版本、浏览器类型、操作系统、品牌手机以及版本设备进行生成自动化测试都是简洁、易用且容易理解,只能说如果作为一个测试,现在可以说”大大真的解放了头脑和双手”.</p></li><li><p>问题.</p><p>其可视化测试,有时运行时会出现莫名问题,比如在寻找一些web页面上的DOM节点时查询不到,需要手动修改或者删除selenium-webdriver事件步骤,其定制性、精确性着实不如使用Jest配合selenium-webdriver编辑测试用例.</p></li></ul></li><li><p>selenium-webdriver.</p><p>浏览器自动化库,提供了许多浏览器自动化接口,用于测试web应用.除了通过npm安装selenium-webdriver之外,还需要安装浏览器相应的驱动.其相应的api和用法<a href='https://www.selenium.dev/selenium/docs/api/javascript/'>selenium-webdriver</a>.</p><p>在new一个WebDriver的过程中,selenium首先会确认浏览器的native component是否存在可用而且匹配的版本,然后就在目标浏览器里启动一整套Web Service,这套Web Service使用了selenium自己设计定义的协议,名字叫做The WebDriver Wire Protocol.这套协议非常之强大,几乎可以操作浏览器做任何事情,包括打开、关闭、最大化、最小化、元素定位、元素点击、上传文件等等.其配合Jest写测试用例再搭配lambdaTest,可自定义各种测试套件在不同的浏览器版本以及操作系统上实现定制且容易理解的自动化测试.</p></li></ul></li><li><p>App自动化测试工具.</p><ul><li><p>Appium.</p><p>Appium是一个开源的,适用于原生或混合移动应用(hybrid mobile apps)的自动化测试工具,Appium应用WebDriver:JSON wire protocol驱动安卓和iOS移动应用,也是App自动化测试工具领域最为流行的一种测试套件.</p><ul><li>Appium支持多App平台(Android、iOS等);</li><li>Appium支持多语言(python、java、ruby、js、c#等),Appium选择了Client&#x2F;Server的设计模式,只要client能够发送http请求给server,那么client用什么语言来实现都是可以的,这就是如何做到支持多语言的原因;</li><li>Appium是跨平台的,可以用在OSX，Windows以及Linux桌面系统上运行;</li><li>Appium扩展了WebDriver的协议,这样的好处是以前的WebDriver API能够直接被继承过来,以前的WebDriver各种语言的binding都可以拿来就用,省去了为浏览器、App端各开发一个client的工作量;</li><li>Appium开源免费;</li></ul></li><li><p>lambdaTest配合Appium.</p><ul><li><p>配置.</p><p>使用JS WebDriverIO With Appium以及配合lambdaTest的配置是有点小复杂的,官方有具体的一步一步实现的文章: <a href='https://www.lambdatest.com/support/docs/appium-nodejs-webdriverio/'>WebDriverIO With Appium</a>.</p></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> testing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lambdaTest </tag>
            
            <tag> testing </tag>
            
            <tag> automation </tag>
            
            <tag> manual </tag>
            
            <tag> real device </tag>
            
            <tag> selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>think of typescript</title>
      <link href="/2022/05/26/thinkoftypescript/"/>
      <url>/2022/05/26/thinkoftypescript/</url>
      
        <content type="html"><![CDATA[<h1 id="typescript配置"><a href="#typescript配置" class="headerlink" title="typescript配置"></a>typescript配置</h1><h2 id="“module”-“umd”"><a href="#“module”-“umd”" class="headerlink" title="{“module”: “umd”}"></a>{“module”: “umd”}</h2><blockquote><p>问题1</p></blockquote><p>  近期在配置typescript配合webpack构建打包项目时发现,tsconfig.json里配置模块导入导出模式为{“module”:”umd”},webpack使用ts-loader来处理,导入导出的模块模式同样使用{libraryTarget: ‘umd’} or output -&gt; library: {type: ‘umd’},构建打包出来的模块竟然不识别(下图就是模块不识别的异常)……反之,我配置为{“module”:”commonjs”},webpack采用同样的配置,构建打包出来的模块就是可以识别的,并且运行很正常.</p><ul><li><p>奇事.</p><ul><li>标准”umd”中不是包含”commonjs”吗?</li><li>webpack为啥在模块导入导出模式中会出现只识别typescript {“module”:”commonjs”},而不识别typescript {“module”:”umd”}呢？</li></ul></li><li><p>异常.</p></li></ul><p>  <img src="https://image.white-than-wood.zone/typescript/typescript_module_umd.png"></p><ul><li><p>原因.</p><p>其根本原因,是typescript的对于模块导入导出的”umd”模式并没有遵从统一的”umd”标准来.</p><ul><li><p>“umd”标准.</p><p><a href='https://white-than-wood.github.io/2022/05/23/thinkofjsmodule/#%E6%A8%A1%E5%9D%97%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA%E7%9A%84%E5%8E%86%E5%8F%B2'>think of JsModule -&gt; 模块导入导出的历史 -&gt; “umd”部分</a></p></li><li><p>typescript “umd”.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params">factory</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">module</span> === <span class="string">&#x27;object&#x27;</span> &amp;&amp; <span class="keyword">typeof</span> <span class="variable language_">module</span>.<span class="property">exports</span> === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">     <span class="keyword">var</span> v = <span class="title function_">factory</span>(<span class="built_in">require</span>, <span class="built_in">exports</span>); <span class="keyword">if</span> (v !== <span class="literal">undefined</span>) <span class="variable language_">module</span>.<span class="property">exports</span> = v;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> define === <span class="string">&#x27;function&#x27;</span> &amp;&amp; define.<span class="property">amd</span>) &#123;</span><br><span class="line">     <span class="title function_">define</span>([<span class="string">&quot;require&quot;</span>, <span class="string">&quot;exports&quot;</span>], factory);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)(<span class="keyword">function</span> (<span class="params"><span class="built_in">require</span>, <span class="built_in">exports</span></span>) &#123;&#125;);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>结论.</p><p>通过两套”umd”配置可以看出,没有标准”umd”条件中的第三种处理,允许导出到window.namesapace &#x3D; export;因此,当大量开发人员需要同时支持所有这三个时,当前的typescript {“module”:”umd”}模块导入导出机制是非常糟糕的,webpack也是基于typescript {“module”:”umd”}产生的这种问题,对typescript {“module”:”umd”}模块导入导出模式是不支持的,所以会出现只识别typescript {“module”:”commonjs”},不识别typescript {“module”:”umd”}的奇事发生.</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> typescript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript module </tag>
            
            <tag> webpack </tag>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>think of postcss</title>
      <link href="/2022/05/25/thinkofpostcss/"/>
      <url>/2022/05/25/thinkofpostcss/</url>
      
        <content type="html"><![CDATA[<h1 id="postcss配置"><a href="#postcss配置" class="headerlink" title="postcss配置"></a>postcss配置</h1><blockquote><p>介绍</p></blockquote><p>  postcss在概念上主要是为了使新的css样式以及特性在更多种类的浏览器上得到兼容.</p><ul><li>css新样式.</li></ul>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*经过postcss转译之前*/</span></span><br><span class="line"><span class="selector-class">.dom</span> &#123;</span><br><span class="line">  user-select: none;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*经过postcss转译之后*/</span></span><br><span class="line"><span class="selector-class">.dom</span> &#123;</span><br><span class="line">    -webkit-user-select:none;</span><br><span class="line">    -moz-user-select:none;</span><br><span class="line">    -ms-user-select:none;</span><br><span class="line">    user-select:none </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>css新特性.</li></ul>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*经过postcss转译之前*/</span></span><br><span class="line"><span class="selector-class">.dom</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#12345678</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*经过postcss转译之后*/</span></span><br><span class="line"><span class="selector-class">.dom</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">18</span>,<span class="number">52</span>,<span class="number">86</span>,.<span class="number">471</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>工具</p></blockquote><p>  现阶段postcss转译的工具使用率比较多的有两种: autoprefixer以及postcss-preset-env.</p><ul><li><p>autoprefixer.</p><p>autoprefixer是将css的新样式在更多种类的浏览器中兼容.</p><ul><li><p>步骤.</p><p>首先下载npm依赖包postcss-loader和autoprefixer.</p><pre><code>npm install autoprefixer postcss-loader -D</code></pre><p>之后创建postcss.config.js文件,配置使用插件.</p><pre><code>touch postcss.config.js</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">&#x27;autoprefixer&#x27;</span>)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>配置webpack构建打包postcss-loader.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [&#123;</span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/.css$/</span>,</span><br><span class="line">      <span class="attr">use</span>: [&#123;</span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&#x27;style-loader&#x27;</span></span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">        <span class="attr">importLoaders</span>: <span class="number">1</span></span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&#x27;postcss-loader&#x27;</span></span><br><span class="line">      &#125;]</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>当然也可以直接不创建postcss.config.js文件,在webpack构建打包postcss-loader配置.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [&#123;</span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/.css$/</span>,</span><br><span class="line">      <span class="attr">use</span>: [&#123;</span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&#x27;style-loader&#x27;</span></span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">        <span class="attr">importLoaders</span>: <span class="number">1</span></span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&#x27;postcss-loader&#x27;</span>,</span><br><span class="line">        <span class="attr">options</span>: &#123;</span><br><span class="line">          <span class="attr">postcssOptions</span>: &#123;</span><br><span class="line">            <span class="attr">plugins</span>: [</span><br><span class="line">              <span class="built_in">require</span>(<span class="string">&#x27;autoprefixer&#x27;</span>)</span><br><span class="line">            ]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;]</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>配置package.json -&gt; browserslist属性,也就是postcss这种扩展兼容操作要选择适用哪些种类浏览器的版本,这一部分我们会拿出来在后续部分细讲.</p></li><li><p>缺点.</p><p>只是对css的新样式在更多种类的浏览器上做兼容,新特性被排除在外,所以autoprefixer所做出的扩展兼容是不完整的.</p></li></ul></li><li><p>postcss-preset-env.</p><p>postcss-preset-env是将css的新样式以及新特性在更多种类的浏览器中兼容,内置autoprefixer,含有autoprefixer的功能.</p><ul><li><p>步骤.</p><p>首先下载npm依赖包postcss-preset-env和postcss-loader.</p><pre><code>npm install postcss-preset-env postcss-loader -D</code></pre><p>之后创建postcss.config.js文件,配置使用插件.</p><pre><code>touch postcss.config.js</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">&#x27;postcss-preset-env&#x27;</span>)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>配置webpack构建打包postcss-loader.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [&#123;</span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/.css$/</span>,</span><br><span class="line">      <span class="attr">use</span>: [&#123;</span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&#x27;style-loader&#x27;</span></span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">        <span class="attr">importLoaders</span>: <span class="number">1</span></span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&#x27;postcss-loader&#x27;</span></span><br><span class="line">      &#125;]</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>当然也可以直接不创建postcss.config.js文件,在webpack构建打包postcss-loader配置.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [&#123;</span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/.css$/</span>,</span><br><span class="line">      <span class="attr">use</span>: [&#123;</span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&#x27;style-loader&#x27;</span></span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">        <span class="attr">importLoaders</span>: <span class="number">1</span></span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&#x27;postcss-loader&#x27;</span>,</span><br><span class="line">        <span class="attr">options</span>: &#123;</span><br><span class="line">          <span class="attr">postcssOptions</span>: &#123;</span><br><span class="line">            <span class="attr">plugins</span>: [</span><br><span class="line">              <span class="built_in">require</span>(<span class="string">&#x27;postcss-preset-env&#x27;</span>)</span><br><span class="line">            ]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;]</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>配置package.json -&gt; browserslist属性,也就是postcss这种扩展兼容操作要选择适用哪些种类浏览器的版本,这一部分我们会拿出来在后续部分细讲.</p></li></ul></li></ul><blockquote><p>browserslist</p></blockquote><p>  postcss对css新样式以及新特性要选择适用哪些种类浏览器的版本所对应的属性.推荐在package.json文件里直接进行配置.</p><ul><li><p>默认配置.</p><p>默认配置[“defaults”]实际上的含义是[“&gt; 2%”,”last 2 versions”,”not dead”],是这三种筛选适用浏览器版本的方式的并集,这三种方式具体的含义在下一部分会具体介绍.</p></li></ul>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;browserslist&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;defaults&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li><p>筛选适用浏览器版本方式枚举.</p><ul><li>[“&gt; n%”]: 选择用户比例大于n%的所有种类的浏览器版本.</li><li>[“last n versions”]: 选择所有种类的浏览器的最近n个版本.</li><li>[“not dead”]: 选择官方并没有舍弃删除掉的所有种类的浏览器版本.</li></ul><p>所以[“defaults”]的含义就是选择用户比例大于2%的、官方并没有舍弃删除掉的、所有种类的浏览器的最近2个版本的并集.</p></li><li><p>其他配置.</p><ul><li>[“&gt; 2% and last 2 versions and not dead”]: and表示”且”也就是交集,此🌰的含义为选择用户比例大于2%的、官方并没有舍弃删除掉的、所有种类的浏览器的最近2个版本的交集.</li><li>[“&gt; 2% or last 2 versions or not dead”]: 除了”,”之外,”or”也可以表示交集.跟[“defaults”]的含义相同.</li><li>[“not &gt; 2%”]: “not”代表”非”也就是非集,此🌰的含义为选择用户比例小于等于2%的所有种类的浏览器的版本.</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> postcss </category>
          
      </categories>
      
      
        <tags>
            
            <tag> postcss </tag>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>think of JsModule</title>
      <link href="/2022/05/23/thinkofjsmodule/"/>
      <url>/2022/05/23/thinkofjsmodule/</url>
      
        <content type="html"><![CDATA[<h1 id="模块导入导出的历史"><a href="#模块导入导出的历史" class="headerlink" title="模块导入导出的历史"></a>模块导入导出的历史</h1><blockquote><p>JsModule的演化经历</p></blockquote><p>   下面这张图可以清晰的看出,javascript module演化的历史,由最初的commonjs到最终方案esm,而现在正处于umd -&gt; esm阶段.</p><p>   <img src="https://image.white-than-wood.zone/jsmodule/js_module_history.png"></p><blockquote><p>commonjs</p></blockquote><p>   commonjs的特性就是其导入不是在编译器编译时执行的,而是在代码执行时才实行的.其特性导致了两个特点: 动态导入和赋值复制.</p><ul><li>动态导入.</li></ul><p>   下面这段js代码完美诠释了此含义,在此判断为true的情况下的commonjs,才会导入selectivizr,并实行selectivizr中的脚本.</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(browser.<span class="property">desktop</span> &amp;&amp; browser.<span class="property">msie</span> &amp;&amp; browser.<span class="property">versionNumber</span> &lt; <span class="number">9</span>)&#123;</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">&#x27;selectivizr&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>赋值复制.</li></ul>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// module.js</span></span><br><span class="line"><span class="keyword">let</span> count = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params"></span>) &#123;</span><br><span class="line">  count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  count,</span><br><span class="line">  add</span><br><span class="line">&#125;; </span><br></pre></td></tr></table></figure>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">const</span> &#123;count, add&#125; = <span class="built_in">require</span>(<span class="string">&#x27;./module.js&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;count:&#x27;</span>, count);</span><br><span class="line"><span class="title function_">add</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;count:&#x27;</span>, count); </span><br></pre></td></tr></table></figure><p>   上面这两段js代码完美诠释了此含义,其结果为:</p><pre><code>count: 4count: 4</code></pre><p>   可以看出commonjs对于导出的变量以及函数都是代码执行时直接复制其值,而不是连同引用一起导出,导致通过模块内部修改变量的值之后,在外部导入模块变量并没有发现其值发生变化.</p><ul><li><p>优势和劣势.</p><ul><li><p>优势: </p><ul><li>导入比较灵活;</li><li>NodeJS模块导入导出完全采用commonjs模式,npm上绝大部分的依赖库都会兼容commonjs模块导入导出,适用范围很广泛;</li><li>同步模块加载;</li></ul></li><li><p>劣势: </p><ul><li>不支持静态分析,静态分析所带来的一系列福利不能在commonjs模块导入导出模式下实行;</li><li>不能实行异步模块加载;</li></ul></li></ul></li></ul><blockquote><p>amd(cmd)</p></blockquote><p>   amd(cmd)的适用范围很窄,受众面也远远没有commonjs和esm广泛,因为受限于第三方库的环境依赖(无论是SeaJS,还是RequireJS都需要事先下载依赖).</p><ul><li><p>优势和劣势.</p><ul><li><p>优势: </p><ul><li>支持同步&#x2F;异步模块加载,amd近似于同步模块导入导出(与commonjs同步模块加载有着本质的不同),cmd异步模块导入导出;</li></ul></li><li><p>劣势: </p><ul><li>不支持静态分析,静态分析所带来的一系列福利不能在amd(cmd)模块导入导出模式下实行;</li><li>受限于第三方库的环境依赖;</li><li>写法上很不友好;</li><li>适用范围很窄,没有类NodeJS、npm以及ECMAScript标准这种受众面很广泛的’推手’推动;</li></ul></li></ul></li></ul><blockquote><p>umd</p></blockquote><p>   umd,全称: Universal Module Definition,其标准为: <a href='https://github.com/umdjs/umd/blob/master/templates/commonjsStrictGlobal.js'>commonjsStrictGlobal</a>以及<a href='https://github.com/umdjs/umd/blob/master/templates/returnExportsGlobal.js'>returnExportsGlobal</a>.</p><ul><li>commonjsStrictGlobal.</li></ul>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Uses CommonJS, AMD or browser globals to create a module. This example</span></span><br><span class="line"><span class="comment">// creates a global even when AMD is used. This is useful if you have some</span></span><br><span class="line"><span class="comment">// scripts that are loaded by an AMD loader, but they still want access to</span></span><br><span class="line"><span class="comment">// globals. If you do not need to export a global for the AMD case, see</span></span><br><span class="line"><span class="comment">// commonjsStrict.js.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// If you just want to support Node, or other CommonJS-like environments that</span></span><br><span class="line"><span class="comment">// support module.exports, and you are not creating a module that has a</span></span><br><span class="line"><span class="comment">// circular dependency, then see returnExportsGlobal.js instead. It will allow</span></span><br><span class="line"><span class="comment">// you to export a function as the module value.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Defines a module &quot;commonJsStrictGlobal&quot; that depends another module called</span></span><br><span class="line"><span class="comment">// &quot;b&quot;. Note that the name of the module is implied by the file name. It is</span></span><br><span class="line"><span class="comment">// best if the file name and the exported global have matching names.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// If the &#x27;b&#x27; module also uses this type of boilerplate, then</span></span><br><span class="line"><span class="comment">// in the browser, it will create a global .b that is used below.</span></span><br><span class="line"></span><br><span class="line">(<span class="keyword">function</span> (<span class="params">root, factory</span>) &#123;</span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">typeof</span> define === <span class="string">&#x27;function&#x27;</span> &amp;&amp; define.<span class="property">amd</span>) &#123;</span><br><span class="line">      <span class="comment">// AMD. Register as an anonymous module.</span></span><br><span class="line">      <span class="title function_">define</span>([<span class="string">&#x27;exports&#x27;</span>, <span class="string">&#x27;b&#x27;</span>], <span class="keyword">function</span> (<span class="params"><span class="built_in">exports</span>, b</span>) &#123;</span><br><span class="line">         <span class="title function_">factory</span>((root.<span class="property">commonJsStrictGlobal</span> = <span class="built_in">exports</span>), b);</span><br><span class="line">      &#125;);</span><br><span class="line">   &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">exports</span> === <span class="string">&#x27;object&#x27;</span> &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">exports</span>.<span class="property">nodeName</span> !== <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">// CommonJS</span></span><br><span class="line">      <span class="title function_">factory</span>(<span class="built_in">exports</span>, <span class="built_in">require</span>(<span class="string">&#x27;b&#x27;</span>));</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// Browser globals</span></span><br><span class="line">      <span class="title function_">factory</span>((root.<span class="property">commonJsStrictGlobal</span> = &#123;&#125;), root.<span class="property">b</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;(<span class="keyword">typeof</span> self !== <span class="string">&#x27;undefined&#x27;</span> ? self : <span class="variable language_">this</span>, <span class="keyword">function</span> (<span class="params"><span class="built_in">exports</span>, b</span>) &#123;</span><br><span class="line">   <span class="comment">// Use b in some fashion.</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// attach properties to the exports object to define</span></span><br><span class="line">   <span class="comment">// the exported module properties.</span></span><br><span class="line">   <span class="built_in">exports</span>.<span class="property">action</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><ul><li>returnExportsGlobal.</li></ul>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Uses CommonJS, AMD or browser globals to create a module.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// If you just want to support Node, or other CommonJS-like environments that</span></span><br><span class="line"><span class="comment">// support module.exports, and you are not creating a module that has a</span></span><br><span class="line"><span class="comment">// circular dependency, then see returnExports.js instead. It will allow</span></span><br><span class="line"><span class="comment">// you to export a function as the module value.</span></span><br><span class="line">   </span><br><span class="line"><span class="comment">// Defines a module &quot;commonJsStrict&quot; that depends another module called &quot;b&quot;.</span></span><br><span class="line"><span class="comment">// Note that the name of the module is implied by the file name. It is best</span></span><br><span class="line"><span class="comment">// if the file name and the exported global have matching names.</span></span><br><span class="line">   </span><br><span class="line"><span class="comment">// If the &#x27;b&#x27; module also uses this type of boilerplate, then</span></span><br><span class="line"><span class="comment">// in the browser, it will create a global .b that is used below.</span></span><br><span class="line">   </span><br><span class="line"><span class="comment">// If you do not want to support the browser global path, then you</span></span><br><span class="line"><span class="comment">// can remove the `root` use and the passing `this` as the first arg to</span></span><br><span class="line"><span class="comment">// the top function.</span></span><br><span class="line">   </span><br><span class="line">(<span class="keyword">function</span> (<span class="params">root, factory</span>) &#123;</span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">typeof</span> define === <span class="string">&#x27;function&#x27;</span> &amp;&amp; define.<span class="property">amd</span>) &#123;</span><br><span class="line">      <span class="comment">// AMD. Register as an anonymous module.</span></span><br><span class="line">      <span class="title function_">define</span>([<span class="string">&#x27;exports&#x27;</span>, <span class="string">&#x27;b&#x27;</span>], factory);</span><br><span class="line">   &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">exports</span> === <span class="string">&#x27;object&#x27;</span> &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">exports</span>.<span class="property">nodeName</span> !== <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">// CommonJS</span></span><br><span class="line">      <span class="title function_">factory</span>(<span class="built_in">exports</span>, <span class="built_in">require</span>(<span class="string">&#x27;b&#x27;</span>));</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// Browser globals</span></span><br><span class="line">      <span class="title function_">factory</span>((root.<span class="property">commonJsStrict</span> = &#123;&#125;), root.<span class="property">b</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;(<span class="keyword">typeof</span> self !== <span class="string">&#x27;undefined&#x27;</span> ? self : <span class="variable language_">this</span>, <span class="keyword">function</span> (<span class="params"><span class="built_in">exports</span>, b</span>) &#123;</span><br><span class="line">   <span class="comment">// Use b in some fashion.</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// attach properties to the exports object to define</span></span><br><span class="line">   <span class="comment">// the exported module properties.</span></span><br><span class="line">   <span class="built_in">exports</span>.<span class="property">action</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><p>   从源码中可以看出umd是对于commonjs、Node(webpack中值枚举为commonjs2)、amd以及Browser globals的并集,是实行兼容的一种模块导入导出模式.</p><ul><li><p>优势和劣势.</p><ul><li><p>优势: </p><ul><li>兼容的这几种模块导入导出都支持同步模块加载;</li><li>导入比较灵活;</li><li>导出的类型更丰富;</li></ul></li><li><p>劣势: </p><ul><li>不支持静态分析,静态分析所带来的一系列福利也不能在umd模块导入导出模式下实行;</li><li>不能实行异步模块加载;</li></ul></li></ul></li></ul><blockquote><p>esm(ecmascript module)</p></blockquote><p>   模块导入导出的最终方案模式,也是现在NodeJS、npm以及ECMAScript标准这些受众面很广泛的’推手’主要推动的模块导入导出模式. 其导入是在编译器编译阶段,由此特性也导致了两个特点: 静态分析和赋值引用,与commonjs的特性与特点完全相反.</p><ul><li>NodeJS ESM.</li></ul><p>   混用阶段,也就是import配合module.exports,require配合export. </p><p>   注意在import配合module.export这部分,import必须导入module.exports导出的模块,不能导入exports导出的模块,由于还是以commonjs模块导出,那么esm导入就不能实行静态分析,只能整体导入.</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//module.js</span></span><br><span class="line"><span class="keyword">const</span> count = <span class="number">4</span>;</span><br><span class="line"><span class="comment">//NodeJS ESM必须使用module.exports导出</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  count </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="comment">//以commonjs模块导出,esm导入不能实行静态分析,只能整体导入.</span></span><br><span class="line"><span class="comment">//import &#123;count&#125; from &#x27;./module.js&#x27;;</span></span><br><span class="line"><span class="keyword">import</span> <span class="variable language_">module</span> <span class="keyword">from</span> <span class="string">&#x27;./module.js&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">module</span>.<span class="property">count</span>);</span><br></pre></td></tr></table></figure><ul><li>静态分析.</li></ul><p>   其导入是在编译器编译阶段,所以需要将所使用的模块都在所要导入文件的头部进行导入.可对其引入的值、函数或者模块可进行静态分析.</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//module.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> count = <span class="number">4</span>;</span><br></pre></td></tr></table></figure>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="comment">//对其引入的值、函数或者模块可进行静态分析</span></span><br><span class="line"><span class="keyword">import</span> &#123;count&#125; <span class="keyword">from</span> <span class="string">&#x27;./module.js&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(count);</span><br></pre></td></tr></table></figure><ul><li>赋值引用.</li></ul>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//module.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> count = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params"></span>) &#123;</span><br><span class="line">  count++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;count, add&#125; <span class="keyword">from</span> <span class="string">&#x27;./module.js&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;count:&#x27;</span>, count);</span><br><span class="line"><span class="title function_">add</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;count:&#x27;</span>, count);</span><br></pre></td></tr></table></figure><p>   上面这两段js代码与commonjs赋值复制部分是同一个🌰,但是执行结果却是不相同的,其结果为:</p><pre><code>count: 4count: 5</code></pre><p>   可以看出esm对于导出的变量以及函数都是编译器编译时连同引用一起导出,导致通过模块内部修改变量的值之后,在外部导入模块变量的值也发生了改变.</p><ul><li><p>优势和劣势.</p><ul><li><p>优势: </p><ul><li>支持静态分析,静态分析所带来的一系列福利都可接收;</li><li>可实行异步模块加载;支持动态导入import();</li></ul></li><li><p>劣势:</p><ul><li>现阶段NodeJS、npm以及ECMAScript标准这些受众面很广泛的’推手’因历史、兼容、底层改动大等问题,实现的都不成熟,还需要Webpack&#x2F;Babel等工具进行转译;</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> javascript module </category>
          
      </categories>
      
      
        <tags>
            
            <tag> commonjs </tag>
            
            <tag> esm </tag>
            
            <tag> amd </tag>
            
            <tag> cmd </tag>
            
            <tag> umd </tag>
            
            <tag> javascript module </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>think of webpack</title>
      <link href="/2022/05/23/thinkofwebpack/"/>
      <url>/2022/05/23/thinkofwebpack/</url>
      
        <content type="html"><![CDATA[<h1 id="webpack配置"><a href="#webpack配置" class="headerlink" title="webpack配置"></a>webpack配置</h1><h2 id="output"><a href="#output" class="headerlink" title="output"></a>output</h2><blockquote><p>问题1</p></blockquote><p>   近期在配置webpack时,发现output -&gt; libraryType: ‘umd’ or output -&gt; library: {type: ‘umd’}打包构建导出的模块无法实行TreeShaking.</p><blockquote><p>介绍</p></blockquote><p>   在配置webpack的输出output时,都会遇到输出模块的配置,也就是webpack 4中的libraryType以及webpack 5中的libraryType(未删但新特性不更新) and library: {type: ‘xxx’},首先解释一下这几个属性的含义,libraryType指的是每个chunk模块以怎样的模块形式构建打包输出,而library: {type: ‘xxx’}在webpack 5中属于对libraryType的复写,跟libraryType是一个含义.</p><ul><li>libraryType的值枚举</li></ul>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  <span class="comment">//值枚举</span></span><br><span class="line">  <span class="comment">//&#x27;commonjs&#x27; | &#x27;commonjs2&#x27; | &#x27;amd&#x27; | &#x27;umd&#x27; | &#x27;this&#x27; | &#x27;var&#x27; | &#x27;global&#x27; | &#x27;module&#x27;</span></span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">libraryType</span>: <span class="string">&#x27;commonjs&#x27;</span> </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>libraryType中包含模块导入导出的值枚举</li></ul><p>   ‘commonjs’ | ‘commonjs2’ | ‘amd’ | ‘umd’ | ‘module’ 这五个值枚举代表了模块导入导出历史的发展轨迹,由最初的commonjs到最终方案esm,关于它们的含义以及对比,这里把它放在了<a href='https://white-than-wood.github.io/2022/05/23/thinkofjsmodule/#%E6%A8%A1%E5%9D%97%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA%E7%9A%84%E5%8E%86%E5%8F%B2'>think of JsModule#模块导入导出的历史</a>中,这部分非常重要,是为后续下文的理解做铺垫.</p><ul><li>TreeShaking</li></ul><p>   TreeShaking最初是<a href='https://rollupjs.org/guide/en/'>RollUp</a>团队推出的一个方案,以esm模块导入导出模式的静态分析为依赖基础,在编译时对项目代码进行瘦身,将无用、空引入的代码模块不构建进打出的包中,减少代码体积,减少项目冗余,提高项目运行速度的模式.</p><ul><li>import umd</li></ul><p>   对于umd的esm import导入,在commonjs、NodeJS环境下都可以实现,但是必须注意 <a href='https://white-than-wood.github.io/2022/05/23/thinkofjsmodule/#%E6%A8%A1%E5%9D%97%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA%E7%9A%84%E5%8E%86%E5%8F%B2'>esm(ecmascript module)</a> NodeJS ESM部分.</p><blockquote><p>结论</p></blockquote><p>   由于上述umd所兼容的所有模块导入导出模式不能实现静态分析,包括import配合module.exports(使用esm import导入commonjs2值枚举导出的模块),而TreeShaking又是以esm模块导入导出模式的静态分析为依赖基础的,所以umd模块导入导出模式不能实行TreeShaking.</p>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript module </tag>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>think of homebrew</title>
      <link href="/2022/05/18/thinkofhomebrew/"/>
      <url>/2022/05/18/thinkofhomebrew/</url>
      
        <content type="html"><![CDATA[<h1 id="download-homebrew"><a href="#download-homebrew" class="headerlink" title="download homebrew"></a>download homebrew</h1><blockquote><p>问题</p></blockquote><p>  最近在下载 homebrew 时,发现其总是出现连接被拒绝的情况.</p><pre><code>curl: (7) Failed to connect to raw.githubusercontent.com port 443: Connection refused</code></pre><blockquote><p>原因</p></blockquote><p>  后续是发现其脚本需要到 raw.githubusercontent.com 上拉取代码,原因是 github 的一些域名的DNS解析被污染，导致 DNS 解析过程无法通过域名取得正确的 IP 地址.</p><blockquote><p>方案</p></blockquote><p>  使用修改本机 hosts 文件,建立域名与 IP 的映射关系,当访问 hosts 文件列表中的域名时,依次尝试在其映射的 IP 进行请求,绕过 DNS.</p><ul><li>步骤.</li></ul><ol><li>使用<a href='https://www.ipaddress.com/'>https://www.ipaddress.com/</a>查找域名所对应的 IP 地址.</li></ol><p>   <img src="https://image.white-than-wood.zone/homebrew/ipaddress.png"></p><ol start="2"><li>使用 switchHosts 修改 mac 的 hosts 文件.</li></ol><p>   <img src="https://image.white-than-wood.zone/homebrew/switchhosts.png"></p><p>   PS: 使用 switchHosts 无法对原有的 hosts 文件进行修改,只能添加新的 hosts 文件对原有的 hosts 文件进行合并覆盖,添加好后,将其配置的 switch 开关打开,允许其合并覆盖.</p><blockquote><p>次生问题</p></blockquote><p>  再次下载,被拒绝的情况不存在了,但是出现了新的异常情况.</p><pre><code>curl: (35) LibreSSL SSL_connect: SSL_ERROR_SYSCALL in connection to raw.githubusercontent.com:443</code></pre><blockquote><p>次生原因</p></blockquote><p>  其根本原因,在于国内网络环境对于境外服务器的种种限制,只用解决这一问题才能真正意义上解决下载 homebrew 网络错误的问题.</p><blockquote><p>次生方案</p></blockquote><p>  所以我查找到了一条可以彻底解决的路,使用国内镜像,就跟 npm 的淘宝镜像相同,homebrew 在国内也有多条镜像途径.</p><ul><li>步骤.</li></ul><ol><li>首先下载 homebrew 国内镜像.</li></ol><pre><code>/bin/zsh -c &quot;$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)&quot;</code></pre><p>  <img src="https://image.white-than-wood.zone/homebrew/homebrew_mirror.png"></p><ol start="2"><li>选择任意一个镜像进行下载,最好是用’梯子’🐶.有时候用’梯子’也下载的非常慢,好在重新进行下载时,会在原来 downloaded 的基础之上进行下载.下载好之后,重启终端命令行工具,或者执行一下 source .bash_profile,使得配置文件在修改了环境变等配置的情况下进行重置.</li></ol><blockquote><p>brew install</p></blockquote><p>   <img src="https://image.white-than-wood.zone/homebrew/homebrew_install_git.png"></p><p>   这样就可以愉快快捷的下载任意在 homebrew 上的资源了! PS: 每下载完一次资源,还是最好执行一下 source ~&#x2F;.bash_profile,使得配置文件在修改了环境变量等配置的情况下进行重置.</p><blockquote><p>异常</p></blockquote><pre><code>fatal: not in a git directoryError: Command failed with exit 128: git</code></pre><p>   当出现这种异常时,就说明本地与远程并没有建立关联,并没有添加 origin 句柄简称映射远程的镜像或者 github 链接,所以我们需要重新设置一下.</p><ul><li>Bash 终端配置</li></ul><pre><code># 替换 brew.git:cd &quot;$(brew --repo)&quot;git remote set-url origin https://mirrors.aliyun.com/homebrew/brew.git# 替换homebrew-core.git:cd &quot;$(brew --repo)/Library/Taps/homebrew/homebrew-core&quot;git remote set-url origin https://mirrors.aliyun.com/homebrew/homebrew-core.git# 应用生效brew update# 替换homebrew-bottles:echo &#39;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles&#39; &gt;&gt; ~/.bash_profilesource ~/.bash_profile</code></pre><ul><li>Zsh 终端配置</li></ul><pre><code># 替换 brew.git:cd &quot;$(brew --repo)&quot;git remote set-url origin https://mirrors.aliyun.com/homebrew/brew.git# 替换homebrew-core.git:cd &quot;$(brew --repo)/Library/Taps/homebrew/homebrew-core&quot;git remote set-url origin https://mirrors.aliyun.com/homebrew/homebrew-core.git# 应用生效brew update# 替换homebrew-bottles:echo &#39;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles&#39; &gt;&gt; ~/.zshrcsource ~/.zshrc</code></pre><p>   这样就可解决本地与远程并没有建立关联的问题.</p>]]></content>
      
      
      <categories>
          
          <category> homebrew </category>
          
      </categories>
      
      
        <tags>
            
            <tag> homebrew </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>think of git</title>
      <link href="/2022/05/15/thinkofgit/"/>
      <url>/2022/05/15/thinkofgit/</url>
      
        <content type="html"><![CDATA[<h1 id="git命令"><a href="#git命令" class="headerlink" title="git命令"></a>git命令</h1><blockquote><p>git remote add origin <a href="mailto:&#x67;&#x69;&#x74;&#64;&#103;&#105;&#x74;&#104;&#x75;&#x62;&#x2e;&#x63;&#x6f;&#x6d;">&#x67;&#x69;&#x74;&#64;&#103;&#105;&#x74;&#104;&#x75;&#x62;&#x2e;&#x63;&#x6f;&#x6d;</a>:white-than-wood&#x2F;white-than-wood.github.io.git</p></blockquote><p>   从官方对于 git remote 的定义来看,意思是列出本地拥有的每个指定远程句柄的简称.简单来说本地与远程交流的一个简化链接,当在本地建立起一个已经初始化的 git 项目时,势必要与远程 git 库建立联系(远程 git 库本来也是为了保存代码、保证多人开发时代码的同步以及简化其流程性而存在的),那么此命令就是为了在本地建立一个句柄简称与远程链接 <a href="mailto:&#x67;&#x69;&#x74;&#x40;&#x67;&#x69;&#116;&#104;&#117;&#98;&#x2e;&#x63;&#111;&#x6d;">&#x67;&#x69;&#x74;&#x40;&#x67;&#x69;&#116;&#104;&#117;&#98;&#x2e;&#x63;&#111;&#x6d;</a>:white-than-wood&#x2F;white-than-wood.github.io.git 进行关联,实行通信,不需要再去 copy 使用 github 远程库上面的链接.</p><blockquote><p>git push –set-upstream origin master</p></blockquote><p>   在本地句柄简称 origin 建立了与远程代码库的关联之后,首次推送同步代码,需要设置推送、同步代码的上游远程分支,当首次设置之后,后续无需设置. –set-upstream origin master 就是设置推送、同步代码的本地 origin 句柄简称的上游分支为 master.</p><blockquote><p>git merge master –allow-unrelated-histories</p></blockquote><p>   当同一个仓库存在多个独立的分支并没有公共的上游交集父分支时,会出现无法合并的情况(多出现于本地 git 初始化时默认主分支为 master,而远程 github 默认主分支为 main ).</p><pre><code>fatal: refusing to merge unrelated histories</code></pre><p>   故此我们需要在人为确认合并分支安全的情况下,将多个独立的分支进行允许强制合并,也就是 –allow-unrelated-histories.</p><blockquote><p>git remote set-url origin <a href="https://mirrors.aliyun.com/homebrew/brew.git">https://mirrors.aliyun.com/homebrew/brew.git</a></p></blockquote><p>   修改本地句柄简称列表中 origin 所对应的远程仓库链接为 <a href="https://mirrors.aliyun.com/homebrew/brew.git">https://mirrors.aliyun.com/homebrew/brew.git</a>.</p><h1 id="SSH公私钥安全关联"><a href="#SSH公私钥安全关联" class="headerlink" title="SSH公私钥安全关联"></a>SSH公私钥安全关联</h1><p>  本地设置与 github 远程仓库的 ssh 安全关联.</p><blockquote><p>步骤</p></blockquote><p>   只有持有账号私钥的情况下才可以推送、同步代码到拥有公钥的 github 远程仓库,使用 ssh 命令产生公私钥.我这里用的是 rsa 的加解密方式,小伙伴们也可以选择自己喜欢的加密方式.</p><pre><code>#使用自己的 github 账号来作为 rsa 加解密的注释#-t: type,选用 rsa 的密钥类型#-b: byte,公私钥的长度大小4096比特#-C: comments,添加公私钥生成的注释ssh-keygen -t rsa -b 4096 -C &#39;15866369958@qq.com&#39;</code></pre><p>   在 mac 下,生成之后,前往自己账号目录下查询 .ssh&#x2F;id_rsa.pub,将 id_rsa.pub 文件里面的内容复制添加到 github 的账号 settings 设置下的 SSH and GPG keys.</p>   <img src="https://image.white-than-wood.zone/git/ssh_settings.png" style="width: 160px;float: left;"/>   <img src="https://image.white-than-wood.zone/git/ssh_settings_SSHKeys.png" style="width: calc(100% - 180px);float: left;margin-left: 20px;"/>   <div style="clear: both;display: block;"></div><p>   添加成功之后,我们测试一下,将远程 github 库(‘<a href="mailto:&#x67;&#105;&#116;&#x40;&#x67;&#105;&#x74;&#104;&#x75;&#x62;&#46;&#x63;&#111;&#109;">&#x67;&#105;&#116;&#x40;&#x67;&#105;&#x74;&#104;&#x75;&#x62;&#46;&#x63;&#111;&#109;</a>‘开头链接)克隆到本地,如果可以拉取到本地,那就说明 ssh-keygen 设置与 github 远程仓库 ssh 安全关联生效.</p><p>  本地设置多个 ssh 私钥与多个 github 账号远程仓库建立安全关联.</p><blockquote><p>示例</p></blockquote><ul><li><p>ssh-add 交与 ssh-agent 代理高速缓存管理.</p><ul><li><p>ssh-agent.</p><p>ssh-agent 实际上是一个本地的高速缓存代理机制,可以在用户不输入任何密码短语的情况下,将 session 缓存中的私钥与远程仓库建立 ssh 安全关联并实行通信.</p></li><li><p>ssh-add.</p><p>ssh-add 是将指定的 ssh 私钥置于 ssh-agent 的高速缓存中,执行时会在 ssh-agent 建立一个 session,并将 ssh 私钥放入其中.注意,此行为是一次性行为,也就是临时性行为,重启 ssh-agent 之后,会重置.</p><pre><code>#可用于查看 ssh-agent 的高速缓存中的私钥列表.ssh-add list#清空 ssh-agent 的高速缓存中的私钥列表.ssh-add -D#重启 ssh-agent.eval $(ssh-agent)</code></pre></li><li><p>步骤.</p><p>使用 ssh-keygen 与 ssh-add 联合使用.</p><pre><code>ssh-keygen -t rsa -b 4096 -C &#39;dreamthen.99@gmail.com&#39;#这时会出现需要你设置进行保存公私钥的文件名,默认还是为id_rsaGenerating public/private rsa key pair.Enter file in which to save the key (/Users/yinwk/.ssh/id_rsa): id_rsa_ano#设置过后,公私钥就会以id_rsa_ano.pub以及id_rsa_ano文件进行保存</code></pre><p>一系列操作结束后,我们还需要将新生成的私钥交与 ssh-agent 代理高速缓存管理.</p><pre><code>ssh-add ~/.ssh/id_rsa_ano</code></pre><p>在成功交与 ssh-agent 管理后,我们重复上一个部分中’本地设置与 github 远程仓库的 ssh 安全关联’的后续操作即可.</p></li><li><p>问题.</p><p>使用此方法是有比较多的问题的,首先就是重启 ssh-agent 或者电脑之后,ssh-agent 中的高速缓存会重置,也就是会被清空掉.再就是对于同一个 ssh 域名下的链接建立 ssh 安全关联时,ssh-agent 会选择高速缓存列表中的一个缓存私钥来建立通信.举个🌰:</p><pre><code>#这两个 github 库有着同样的域名别称,也就是 @github.com,在建立通信时,如果将两个账号下生成的私钥都放入 ssh-agent 高速缓存中,ssh-agent 会默认选择高速缓存列表中先放入的 ssh 私钥进行通信.#只有在切换不同的账号项目开发时,将 ssh-agent 重启,并且将当前项目所对应的 ssh 私钥放入 ssh-agent 高速缓存中才可以建立 ssh 安全关联并且实行通信.git@github.com:white-than-wood/white-than-wood.github.io.gitgit@github.com:dreamthen/webpack-rebuild.github.io.git</code></pre></li><li><p>结论.</p><p>ssh-add 交与 ssh-agent 代理高速缓存管理这种方法,本质也不是为了让多个 ssh 公私钥与多个 github 远程仓库建立安全关联而产生的,作用是为了避免每次与远程建立 ssh 安全关联时必须填写密码短语.并且我们在生成 ssh 密钥时,一般也是不设置密码短语的,都是直接回车(密码短语为空).这种每次必须手动向高速缓存中添加私钥的行为,不仅麻烦,而且是临时性的、不合理的.</p></li></ul></li><li><p>配置 .ssh&#x2F;config 文件使不同本地项目 ssh 私钥永久性与远程不同 github 账号仓库建立安全关联.</p><ul><li><p>.ssh&#x2F;config.</p><p>通过配置 config 文件来辅助管理 ssh,通常 .ssh&#x2F;config 文件是不存在的,需要自己创建配置.</p><pre><code>touch ~/.ssh/config</code></pre></li><li><p>步骤.</p><ul><li><p>配置config.</p><p>配置多个域名对应不同的ssh私钥,与本地自定义的域名别称建立联系.</p><pre><code>vim ~/.ssh/config</code></pre><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#github</span><br><span class="line">Host github.com-white-than-wood</span><br><span class="line">     HostName github.com</span><br><span class="line">     User white-than-wood</span><br><span class="line">     IdentityFile &quot;~/.ssh/id_rsa&quot;</span><br><span class="line">     IdentitiesOnly yes</span><br><span class="line">       </span><br><span class="line">#github</span><br><span class="line">Host github.com-dreamthen</span><br><span class="line">     HostName github.com</span><br><span class="line">     User dreamthen</span><br><span class="line">     IdentityFile &quot;~/.ssh/id_rsa_ano&quot;</span><br><span class="line">     IdentitiesOnly yes</span><br><span class="line">       </span><br><span class="line">#Host: 自定义的域名别称,要与本地不同账号的项目域名关联</span><br><span class="line">#HostName: 对应的代码存储/协同网站域名,如 github.com,不同公司的 gitlab 域名不同</span><br><span class="line">#User: 对应的不同代码存储/协同网站域名账号名称</span><br><span class="line">#IdentityFile: 对应的不同代码存储/协同网站域名账号下的 ssh 私钥</span><br><span class="line">#IdentitiesOnly: 只能通过指定的 IdentityFile 来与远程建立 ssh 安全关联并实行通信</span><br></pre></td></tr></table></figure></li><li><p>配置本地不同账号的项目域名、账号名称以及 email 地址.</p><p>进入不同github账号的项目下,修改 .git&#x2F;config 文件,注意自定义的域名别称要与 .ssh&#x2F;config 中的 Host 对应,因为每次建立 ssh 安全关联实行通信都会通过 .ssh&#x2F;config 文件进行辅助管理.</p><pre><code>vim .git/config</code></pre>  <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#white-than-wood 账号下的项目</span><br><span class="line">[remote &quot;origin&quot;]</span><br><span class="line">        url = git@github.com-white-than-wood:white-than-wood/white-than-wood.github.io.git</span><br><span class="line">        fetch = +refs/heads/*:refs/remotes/origin/*</span><br><span class="line">        </span><br><span class="line">[user]</span><br><span class="line">        name = white-than-wood</span><br><span class="line">        email = 1309777341@qq.com </span><br><span class="line"></span><br><span class="line">#dreamthen 账号下的项目</span><br><span class="line">[remote &quot;origin&quot;]</span><br><span class="line">        url = git@github.com-dreamthen:dreamthen/webpack-rebuild.github.io.git</span><br><span class="line">        fetch = +refs/heads/*:refs/remotes/origin/*</span><br><span class="line">        </span><br><span class="line">[user]</span><br><span class="line">        name = dreamthen</span><br><span class="line">        email = dreamthen.00@gmail.com</span><br></pre></td></tr></table></figure><p>也可以直接使用命令来进行修改 .git&#x2F;config 中的内容.</p><pre><code>#white-than-wood 账号下的项目git remote set-url origin git@github.com-white-than-wood:white-than-wood/white-than-wood.github.io.gitgit config user.name &#39;white-than-wood&#39;git config user.email &#39;1309777341@qq.com&#39;#dreamthen 账号下的项目git remote set-url origin git@github.com-dreamthen:dreamthen/webpack-rebuild.github.io.gitgit config user.name &#39;dreamthen&#39;git config user.email &#39;dreamthen.00@gmail.com&#39;</code></pre></li></ul></li><li><p>测试自定义域名别称.</p><pre><code># 若 Hi white-than-wood! You&#39;ve successfully authenticated, but GitHub does not provide shell access. 说明测试与远程建立 ssh 安全关联实行通信身份验证通过.ssh -T git@github.com-white-than-wood# 若 Hi dreamthen! You&#39;ve successfully authenticated, but GitHub does not provide shell access. 说明测试与远程建立 ssh 安全关联实行通信身份验证通过.ssh -T git@github.com-dreamthen</code></pre></li><li><p>结论</p><p>此方法永久性的解决了不同的 github 账号下本地项目 ssh 私钥与远程建立安全关联并实行通信的问题.</p></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo搭建next博客</title>
      <link href="/2022/05/14/hexo%E6%90%AD%E5%BB%BAnext%E5%8D%9A%E5%AE%A2/"/>
      <url>/2022/05/14/hexo%E6%90%AD%E5%BB%BAnext%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>   <b>此博客用于搭建 hexo 的工具博客.基本不会探索深究配置的原因,敬请知悉~</b></p><h1 id="hexo-安装"><a href="#hexo-安装" class="headerlink" title="hexo 安装"></a>hexo 安装</h1><blockquote><p>步骤</p></blockquote><p>  首先要用 npm 依赖资源管理工具安装全局命令 hexo-cli.</p><pre><code>npm install hexo-cli -g</code></pre><p>  然后使用 hexo 初始化博客目录,比如 blog 目录,目录名要与后续自己建立的 github 上 hexo 托管代码的 repository 同名.</p><pre><code>hexo init blog</code></pre><p>  接着 github 建库.</p>  <p style="background-color: #f3f3f3;padding: 10px;font-size: 0.875em;font-family: 'PingFang SC', 'Microsoft YaHei';">建立一个以 white-than-wood(我的用户名).github.io 结尾的 repository ,作为 hexo 托管代码的库, github 默认 .github.io 结尾作为用户的网站二级域名,建立一个新的分支作为创作分支(因为主分支是用来发布呈现网站的).</p><p>  之后,进入生成的 blog 文件夹,与远程 github repository 建立关联,并同步远程最新资源.</p><pre><code>git remote add origin git@github.com:white-than-wood/white-than-wood.github.io.gitgit pull</code></pre><p>  再 npm 下载外部依赖包.</p><pre><code>npm i/npm install</code></pre><p>  或者使用 yarn 下载外部依赖包.</p><pre><code>yarn</code></pre><p>  最后启动 hexo 自身搭建的服务,生成本地的博客网站,默认端口在本地 ip 地址下的 4000 端口,假如你不想启动在 4000 端口,也可使用-p 其他端口号进行配置,比如-p 9977.</p><pre><code>hexo serverhexo server -p 9977</code></pre><p>  PS: 最好先将本地代码上传至远程之后,再执行 hexo 配置.</p><pre><code>git add .git commit &#39;build:搭建hexo个人Github Page博客&#39;git push --set-upstream origin master</code></pre><p>  默认的主题风格 theme 是 landscape ,假如你想更换,可以通过<a href='https://hexo.io/themes/'>https://hexo.io/themes</a>进行筛选,筛选之后进行配置,主题配置见下文.</p><h1 id="hexo-命令"><a href="#hexo-命令" class="headerlink" title="hexo 命令"></a>hexo 命令</h1><blockquote><p>示例</p></blockquote><p>  首先建立一篇名为 ‘hexo搭建next博客’ 的博客.</p><pre><code>hexo new hexo搭建next博客</code></pre><p>  在根目录 -&gt; source 目录底下的 _post 目录下找到名为 hexo 配置的博客文件,在里面用 markdown 进行记录自己的博客,当然可以在 hexo server 自带的服务器运行监听的情况下,进行添加和修改自己的博客.之后,进行生成静态文件.</p><pre><code>hexo generate</code></pre><p>  生成静态文件之后,进行部署.</p><pre><code>hexo deploy</code></pre><p>  生成静态文件和部署也可以使用一句命令执行.</p><pre><code>hexo generate -deployhexo deploy -generate</code></pre><p>  为了防止存在静态文件和缓存,造成没有重新渲染页面的问题,在每一次部署之前,要运行一下清理静态文件和缓存的命令.</p><pre><code>hexo cleanhexo generatehexo deploy</code></pre><p>  hexo deploy 部署之后,根据项目根目录底下 _config.yml 配置文件的 deploy 配置,会提交到远程 github repository 库.</p><h1 id="hexo-配置"><a href="#hexo-配置" class="headerlink" title="hexo 配置"></a>hexo 配置</h1><p>   PS: 以下所说的”根目录”指的就是当前创作的 repository 目录,”主题目录”就是根目录下&#x2F;themes目录下的主题环境.</p><h4 id="hexo-deploy-发布配置"><a href="#hexo-deploy-发布配置" class="headerlink" title="hexo deploy 发布配置"></a>hexo deploy 发布配置</h4><blockquote><p>步骤</p></blockquote><p>  要想部署到自己搭建的 Github Page 个人网站,首先要下载 hexo-git 插件.</p><pre><code>npm install hexo-deployer-git --save</code></pre><p>  然后就要在你自己的本地hexo博客的项目里面,更改根目录底下的 _config.yml 文件,全局搜索 git ,更改 deploy 发布配置,将 source 目录下面的内容进行构建发布到 repo github 地址的分支上.</p><pre><code>deploy:    type: git    #你的个人网站 github 库的链接地址,最好使用 git@ 开头的, https@ 开头的会报错    repo: git@github.com:dreamthen/dreamthen.github.io.git    #分支名    branch: master</code></pre><h4 id="hexo-theme-主题配置"><a href="#hexo-theme-主题配置" class="headerlink" title="hexo theme 主题配置"></a>hexo theme 主题配置</h4><blockquote><p>示例</p></blockquote><p>  筛选好自己选中的主题之后,就需要在项目里面进行配置更换。首先需要下载远程 github 库里面的主题目录到项目根目录里面的 themes 文件夹底下,比如本人用的是 next 主题的 hexo.</p><pre><code>git clone https://github.com/iissnan/hexo-theme-next.git themes/next</code></pre><p>  随后更改根目录里面的 _config.yml 文件,全局搜索 theme ,更改 theme 配置.</p><pre><code>theme: next</code></pre><p>  接着选择主题展示的方式,需要在主题的项目目录下,更改 _config.yml 文件,全局搜索 Scheme ,更改 Scheme 配置,比如 next 主题底下的 Scheme 配置.</p><pre><code>scheme:    #scheme: Muse    #scheme: Mist    scheme: Pisces    #scheme: Gemini</code></pre><h4 id="hexo-language语言配置"><a href="#hexo-language语言配置" class="headerlink" title="hexo language语言配置"></a>hexo language语言配置</h4><blockquote><p>步骤</p></blockquote><p>  每个主题的语言都是根据作者的母语来配置的,要想配置开发者自己国家的语言,还是更改项目根目录底下的 _config.yml 文件,全局搜索 language ,更改 language 配置.</p><pre><code>language: zh-CN</code></pre><p>  再更改主题目录底下的 _config.yml 文件,全局搜索 language ,更改 language 配置.</p><pre><code>language: zh-CN    </code></pre><h4 id="hexo-page页面配置"><a href="#hexo-page页面配置" class="headerlink" title="hexo page页面配置"></a>hexo page页面配置</h4><blockquote><p>步骤</p></blockquote><p>  hexo提供了几个可供筛选的页面,常用的有这么几个：home(首页)、tags(标签)、about(关于我)、archives(档案)和categories(分类),首先要创建页面.</p><pre><code>hexo new page tagshexo new page abouthexo new page archiveshexo new page categories</code></pre><p>  接着在主题目录下,更改 _config.yml 文件,全局搜索 menu ,更改 menu 配置,当然每个主题的配置不尽相同.</p><pre><code>menu:    home: / || fa fa-home    about: /about/ || fa fa-user    tags: /tags/ || fa fa-tags    categories: /categories/ || fa fa-th    archives: /archives/ || fa fa-archive</code></pre><p>  随后更改 source 目录底下创建的页面配置,以 tags 为例.</p><pre><code>----------------------------    title: about    date: 2018-04-24 17:57:26    type: &quot;tags&quot;    comments: false----------------------------</code></pre><h4 id="hexo-avatar-头像配置"><a href="#hexo-avatar-头像配置" class="headerlink" title="hexo avatar 头像配置"></a>hexo avatar 头像配置</h4><blockquote><p>步骤</p></blockquote><p>  配置自己个人博客网站的头像,需要更改主题目录底下的 _config.yml 文件,添加 avatar 配置.</p><pre><code>#头像url链接avatar: https://avatars.githubusercontent.com/u/11425476?v=4</code></pre><h4 id="hexo-search-全站搜索配置"><a href="#hexo-search-全站搜索配置" class="headerlink" title="hexo search 全站搜索配置"></a>hexo search 全站搜索配置</h4><blockquote><p>步骤</p></blockquote><p>  假如想要配置自己hexo个人博客网站的全站搜索配置,首先要下载 hexo search 外部依赖包.</p><pre><code>npm install hexo-generator-search --savenpm install hexo-generator-searchdb --save</code></pre><p>  更改根目录底下的 _config.yml 文件,添加 search 配置.</p><pre><code>search:    path: search.xml    field: post    format: html    limit: 10000</code></pre><p>  开启主题目录底下的 _config.yml 文件中的 local_search 配置.</p><pre><code>local_search:    enable: true        </code></pre><h4 id="hexo-new-post-name配置"><a href="#hexo-new-post-name配置" class="headerlink" title="hexo new_post_name配置"></a>hexo new_post_name配置</h4><blockquote><p>步骤</p></blockquote><p>  假如想要更改每一篇博客的文件名称,不再是默认的:title.md的文件名,需要更改根目录底下的 _config.yml 文件,更改 new_post_name 配置.</p><pre><code>new_post_name: :year-:month-:day-:title.md</code></pre><h4 id="hexo-auto-excerpt阅读全文配置"><a href="#hexo-auto-excerpt阅读全文配置" class="headerlink" title="hexo auto_excerpt阅读全文配置"></a>hexo auto_excerpt阅读全文配置</h4><blockquote><p>步骤</p></blockquote><p>  博客文章一般都会很长的,所以在首页要对博客进行超长省略,要想看所有的内容,点击阅读全文或者文章标题进入全文查看.在 hexo-theme-next 主题版本7.6之前需要更改主题目录底下的 _config.yml 文件,全局搜索 auto_excerpt ,更改 auto_excerpt 配置.</p><pre><code>auto_excerpt:    enable: true    length: 200</code></pre><p>  在 hexo-theme-next 主题版本7.6之后,由于 auto_excerpt 这种超长省略不应该是主题插件应该做的,作者将此配置移除,并给出新的专门针对此配置的插件 <a href='https://github.com/chekun/hexo-excerpt'>hexo-excerpt</a>.</p><p>   <img src="https://image.white-than-wood.zone/hexo/remove_auto_excerpt.png"></p><pre><code>excerpt:    #显示的 markdown 代码块层数    depth: 5    excerpt_excludes: []    more_excludes: []    #设置为true: 显示超长省略,只展示部分,隐藏全文    #设置为false: 展示全文    hideWholePostExcerpts: true    excerpt_description: true    #是否显示阅读全文按钮    read_more_btn: true</code></pre><h4 id="hexo-browsersync开发环境创作自动更新配置"><a href="#hexo-browsersync开发环境创作自动更新配置" class="headerlink" title="hexo browsersync开发环境创作自动更新配置"></a>hexo browsersync开发环境创作自动更新配置</h4><blockquote><p>步骤</p></blockquote><p>  在创作博客时,需要每次手动刷新页面才能看到修改后的结果,感觉非常没有效率,如果存在类hrm热加载这种插件就太爽了! hexo-browsersync 可以直接解决这个问题.</p><p>  此插件原理基于 browser-sync ,与 hexo 建立关联,当创作的文件内容发生改变时, browser-sync 就会监听到并刷新浏览器整个页面的内容,做到不需手动刷新,大大提高了创作效率.</p><pre><code>#更改根目录底下的 _config.yml 文件,添加 browsersync 属性#设置监听 watch 属性为 true 就可以了!browsersync:    watch: true    logLevel: &quot;warn&quot;</code></pre><h4 id="hexo-busuanzi-count卜算子统计配置"><a href="#hexo-busuanzi-count卜算子统计配置" class="headerlink" title="hexo busuanzi_count卜算子统计配置"></a>hexo busuanzi_count卜算子统计配置</h4><blockquote><p>步骤</p></blockquote><p>  上线之后,需要对个人博客进行管理,阅读人数以及次数对于创作者来说是很重要反馈点.统计配置需要更改主题目录底下的 _config.yml 文件,配置 busuanzi_count 卜算子统计.</p><pre><code>#可配置查看个人博客的阅读人数、次数以及每篇博客文章的次数busuanzi_count:    enable: true    total_visitors: true    total_visitors_icon: fa fa-user    total_views: true    total_views_icon: fa fa-eye    post_views: true    post_views_icon: fa fa-eye</code></pre><h4 id="hexo-baidu-analytics百度统计配置"><a href="#hexo-baidu-analytics百度统计配置" class="headerlink" title="hexo baidu_analytics百度统计配置"></a>hexo baidu_analytics百度统计配置</h4><blockquote><p>步骤</p></blockquote><p>  卜算子统计有时候会出现一些异常,比如pv莫名会加100,uv不再区分单个ip.为了追求更精确、更智能,我们采用百度统计. 统计配置需要更改主题目录底下的 _config.yml 文件,配置 baidu_analytics 百度统计.</p><p>  根据<a href='https://tongji.baidu.com/main/setting/10000339309/home/site/getjs?siteId=18040501'>百度统计-使用配置-代码获取</a>,将hm.js后方自动生成的id配置至baidu_analytics.</p><p>  <img src="https://image.white-than-wood.zone/hexo/baidu_analytics.png"></p><pre><code># Baidu Analytics# See: https://tongji.baidu.combaidu_analytics: 31f07c2ec89d10385ec28e8eea5bbc3a</code></pre><h4 id="hexo-Gitalk留言板配置"><a href="#hexo-Gitalk留言板配置" class="headerlink" title="hexo Gitalk留言板配置"></a>hexo Gitalk留言板配置</h4><blockquote><p>步骤</p></blockquote><p>  留言板 comments 是创作者与阅读者进行互动反馈的窗口,可以使阅读者与创作者共同进步.对于 hexo 来说,支持的留言板模式有很多种: ‘disqus | disqusjs | changyan | livere | gitalk | utterances’ ,比较常见、用户量比较大且与github关联性比较强的就是 gitalk 以及 disqus,disqusjs 需要’梯子’🐶才能评论,那么还是选用 gitalk .留言板配置需要更改主题目录下的 _config.yml 文件.</p><p>   配置comments:</p><pre><code># Multiple Comment System Supportcomments:    # Available values: tabs | buttons    style: tabs    # Choose a comment system to be displayed by default.    # Available values: disqus | disqusjs | changyan | livere | gitalk | utterances    active: gitalk    # Setting `true` means remembering the comment system selected by the visitor.    storage: true    # Lazyload all comment systems.    lazyload: false    # Modify texts or order for any naves, here are some examples.    nav:        gitalk:            order: -2        disqus:            text: Load Disqus            order: -1</code></pre><p>   配置gitalk:</p><pre><code># Gitalk# For more information: https://gitalk.github.iogitalk:    enable: true    github_id: white-than-wood # GitHub repo owner    repo: white-than-wood.github.io # Repository name to store issues    client_id: 1191ab5290535c1acb09 # GitHub Application Client ID    client_secret: 8d2cbebac1ae1230f84d1f9f7a36f8008a42c14b # GitHub Application Client Secret    admin_user: white-than-wood # GitHub repo owner and collaborators, only these guys can initialize gitHub issues    distraction_free_mode: true # Facebook-like distraction free mode    # When the official proxy is not available, you can change it to your own proxy address    proxy: https://white-than-wood.zone/https://github.com/login/oauth/access_token    # proxy: login/oauth/access_token # This is official proxy address    # Gitalk&#39;s display language depends on user&#39;s browser or system environment    # If you want everyone visiting your site to see a uniform language, you can set a force language value    # Available values: en | es-ES | fr | ru | zh-CN | zh-TW    language: zh-CN</code></pre><p>   上面的配置项中有几个需要说明的：</p><ul><li>client_id 与 client_secret 是 Github 的 OAuth 认证(下一个部分会介绍).</li><li>github_id 与 admin_user 这里建议填一样,填成自己的 github 账号名(不是邮箱,也不是用户名).</li><li>proxy 默认即是上面的地址,它其实会回调到这里<a href='https://github.com/login/oauth/access_token'>https://github.com/login/oauth/access_token</a>来,出403的问题,主要是由于跨域.</li></ul><p>   Github 的 OAuth 认证.</p>   <p style="background-color: #f3f3f3;padding: 10px;font-size: 0.875em;font-family: 'PingFang SC', 'Microsoft YaHei';">前提是自己得有一个 github 账号,才能注册 OAuth application ,这是<a href='https://github.com/settings/applications/new'> OAuth 应用注册地址</a>.</p><p>   <img src="https://image.white-than-wood.zone/hexo/github_auth_register.png"></p><p>   PS: 如果有自定义域名(如自己申请的阿里云域名),则在上图中填入自定义域名.</p><p>   注册之后,点击下图中’Generate a new client secret’按钮,在个人账号下的Settings -&gt; Developer settings -&gt; OAuth Apps下面可以查看 OAuth 认证 client_id 与 client_secret.</p><p>   <img src="https://image.white-than-wood.zone/hexo/developer_settings.png"></p><p>  Gitalk 自动初始化.</p>   <p style="background-color: #f3f3f3;padding: 10px;font-size: 0.875em;font-family: 'PingFang SC', 'Microsoft YaHei';">原理: 通过 sitemap 中的信息,请求 github 开放 api 达到自动产生 issues 的目的.<br/>   基本的要求: github API 需要请求 token.</p><ul><li><p>申请 github Token.</p><p>我们需要使用 Personal access tokens 方式,这种方式限制每小时5000次,结合缓存功能,基本满足需求.<br>从 Github 的 <a href='https://github.com/settings/tokens'>Personal access tokens</a> 页面,点击 <a href='https://github.com/settings/tokens/new'>Generate new token</a>.</p></li></ul><p>   <img src="https://image.white-than-wood.zone/hexo/access_tokens.png"></p><ul><li><p>安装 npm 依赖项.</p><pre><code>npm i -D md5 moment request xml-parsernpm i -S hexo-generator-sitemap</code></pre></li><li><p>配置 sitemap.</p><p>在根目录中创建 sitemap_template.xml.</p></li></ul>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">urlset</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.sitemaps.org/schemas/sitemap/0.9&quot;</span>&gt;</span></span><br><span class="line">  &#123;% for post in posts %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">loc</span>&gt;</span>&#123;&#123; post.permalink | uriencode &#125;&#125;<span class="tag">&lt;/<span class="name">loc</span>&gt;</span></span><br><span class="line">    &#123;% if post.updated %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">lastmod</span>&gt;</span>&#123;&#123; post.updated.toISOString() &#125;&#125;<span class="tag">&lt;/<span class="name">lastmod</span>&gt;</span></span><br><span class="line">    &#123;% elif post.date %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">lastmod</span>&gt;</span>&#123;&#123; post.date.toISOString() &#125;&#125;<span class="tag">&lt;/<span class="name">lastmod</span>&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">date</span>&gt;</span>&#123;&#123; post.date &#125;&#125;<span class="tag">&lt;/<span class="name">date</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>&#123;&#123; post.title + &#x27; | &#x27; + config.title &#125;&#125;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    &#123;# nunjucks 模版语法 https://github.com/mozilla/nunjucks #&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">desc</span>&gt;</span>&#123;&#123; post.description | default(post.excerpt) | default(post.content) | default(config.description) | striptags | truncate(200, true, &#x27;&#x27;) &#125;&#125;<span class="tag">&lt;/<span class="name">desc</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">urlset</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>修改根目录下的 _config.yml.</li></ul><pre><code>#Sitemapsitemap:    path: sitemap.xml    template: ./sitemap_template.xml    rel: false    tag: true    category: false</code></pre><ul><li>生成 sitemap.xml 文件.</li></ul><pre><code>hexo clean &amp;&amp; hexo generate</code></pre><ul><li>根目录添加 talk-auto-init.js (注意还是不要将此文件置于github中,建议ignore).</li></ul>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">&#x27;request&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> xmlParser = <span class="built_in">require</span>(<span class="string">&#x27;xml-parser&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> md5 = <span class="built_in">require</span>(<span class="string">&#x27;md5&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置信息</span></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="attr">username</span>: <span class="string">&#x27;white-than-wood&#x27;</span>, <span class="comment">// GitHub repository 所有者，可以是个人或者组织。对应 Gitalk 配置中的 owner</span></span><br><span class="line">  <span class="attr">repo</span>: <span class="string">&quot;white-than-wood.github.io&quot;</span>, <span class="comment">// 储存评论 issue 的 github 仓库名，仅需要仓库名字即可。对应 Gitalk 配置中的 repo</span></span><br><span class="line">  <span class="attr">token</span>: <span class="string">&#x27;ghp_EuXHDkOxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&#x27;</span>, <span class="comment">// 前面申请的 personal access token</span></span><br><span class="line">  <span class="attr">sitemap</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;./public/sitemap.xml&#x27;</span>), <span class="comment">// 自己站点的 sitemap 文件地址</span></span><br><span class="line">  <span class="attr">cache</span>: <span class="literal">true</span>, <span class="comment">// 是否启用缓存，启用缓存会将已经初始化的数据写入配置的 gitalkCacheFile 文件，下一次直接通过缓存文件判断</span></span><br><span class="line">  <span class="attr">gitalkCacheFile</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;./gitalk-init-cache.json&#x27;</span>), <span class="comment">// 用于保存 gitalk 已经初始化的 id 列表</span></span><br><span class="line">  <span class="attr">gitalkErrorFile</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;./gitalk-init-error.json&#x27;</span>), <span class="comment">// 用于保存 gitalk 初始化报错的数据</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> api = <span class="string">&#x27;https://api.github.com/repos/&#x27;</span> + config.<span class="property">username</span> + <span class="string">&#x27;/&#x27;</span> + config.<span class="property">repo</span> + <span class="string">&#x27;/issues&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 读取 sitemap 文件</span></span><br><span class="line"><span class="comment"> * 远程 sitemap 文件获取可参考 https://www.npmjs.com/package/sitemapper</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">sitemapXmlReader</span> = (<span class="params">file</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> data = fs.<span class="title function_">readFileSync</span>(file, <span class="string">&#x27;utf8&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> sitemap = <span class="title function_">xmlParser</span>(data);</span><br><span class="line">    <span class="keyword">let</span> ret = [];</span><br><span class="line">    sitemap.<span class="property">root</span>.<span class="property">children</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">url</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> loc = url.<span class="property">children</span>.<span class="title function_">find</span>(<span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> item.<span class="property">name</span> === <span class="string">&#x27;loc&#x27;</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">if</span> (!loc) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> title = url.<span class="property">children</span>.<span class="title function_">find</span>(<span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> item.<span class="property">name</span> === <span class="string">&#x27;title&#x27;</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">const</span> desc = url.<span class="property">children</span>.<span class="title function_">find</span>(<span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> item.<span class="property">name</span> === <span class="string">&#x27;desc&#x27;</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">const</span> date = url.<span class="property">children</span>.<span class="title function_">find</span>(<span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> item.<span class="property">name</span> === <span class="string">&#x27;date&#x27;</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">      ret.<span class="title function_">push</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: loc.<span class="property">content</span>,</span><br><span class="line">        <span class="attr">title</span>: title.<span class="property">content</span>,</span><br><span class="line">        <span class="attr">desc</span>: desc.<span class="property">content</span>,</span><br><span class="line">        <span class="attr">date</span>: date.<span class="property">content</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="keyword">return</span> [];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 gitalk 使用的 id</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getGitalkId</span> = (<span class="params">&#123;</span></span><br><span class="line"><span class="params">                       url: u,</span></span><br><span class="line"><span class="params">                       date</span></span><br><span class="line"><span class="params">                     &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> link = url.<span class="title function_">parse</span>(u);</span><br><span class="line">  <span class="comment">// 链接不存在，不需要初始化</span></span><br><span class="line">  <span class="keyword">if</span> (!link || !link.<span class="property">pathname</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!date) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">md5</span>(link.<span class="property">pathname</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过以请求判断是否已经初始化</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; gitalk 初始化的id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">[boolean, boolean]</span>&#125; 第一个值表示是否出错，第二个值 false 表示没初始化， true 表示已经初始化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getIsInitByRequest</span> = (<span class="params">id</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> options = &#123;</span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;Authorization&#x27;</span>: <span class="string">&#x27;token &#x27;</span> + config.<span class="property">token</span>,</span><br><span class="line">      <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">url</span>: api + <span class="string">&#x27;?labels=&#x27;</span> + id + <span class="string">&#x27;,Gitalk&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">request</span>(options, <span class="keyword">function</span> (<span class="params">err, response, body</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">resolve</span>([err, <span class="literal">false</span>]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (response.<span class="property">statusCode</span> != <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">resolve</span>([response, <span class="literal">false</span>]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> res = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(body);</span><br><span class="line">      <span class="keyword">if</span> (res.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">resolve</span>([<span class="literal">false</span>, <span class="literal">true</span>]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">resolve</span>([<span class="literal">false</span>, <span class="literal">false</span>]);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过缓存判断是否已经初始化</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; gitalk 初始化的id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">boolean</span>&#125; false 表示没初始化， true 表示已经初始化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> getIsInitByCache = (<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 判断缓存文件是否存在</span></span><br><span class="line">  <span class="keyword">let</span> gitalkCache = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    gitalkCache = <span class="built_in">require</span>(config.<span class="property">gitalkCacheFile</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;&#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">id</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!gitalkCache) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (gitalkCache.<span class="title function_">find</span>(<span class="function">(<span class="params">&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">                            id: itemId</span></span></span><br><span class="line"><span class="params"><span class="function">                          &#125;</span>) =&gt;</span> (itemId === id))) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据缓存，判断链接是否已经初始化</span></span><br><span class="line"><span class="comment">// 第一个值表示是否出错，第二个值 false 表示没初始化， true 表示已经初始化</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">idIsInit</span> = <span class="keyword">async</span> (<span class="params">id</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (!config.<span class="property">cache</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> <span class="title function_">getIsInitByRequest</span>(id);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果通过缓存查询到的数据是未初始化，则再通过请求判断是否已经初始化，防止多次初始化</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">getIsInitByCache</span>(id) === <span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> <span class="title function_">getIsInitByRequest</span>(id);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> [<span class="literal">false</span>, <span class="literal">true</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">gitalkInit</span> = (<span class="params">&#123;</span></span><br><span class="line"><span class="params">                      url,</span></span><br><span class="line"><span class="params">                      id,</span></span><br><span class="line"><span class="params">                      title,</span></span><br><span class="line"><span class="params">                      desc</span></span><br><span class="line"><span class="params">                    &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">//创建issue</span></span><br><span class="line">  <span class="keyword">const</span> reqBody = &#123;</span><br><span class="line">    <span class="string">&#x27;title&#x27;</span>: title,</span><br><span class="line">    <span class="string">&#x27;labels&#x27;</span>: [id, <span class="string">&#x27;Gitalk&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;body&#x27;</span>: url + <span class="string">&#x27;\r\n\r\n&#x27;</span> + desc</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> options = &#123;</span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;Authorization&#x27;</span>: <span class="string">&#x27;token &#x27;</span> + config.<span class="property">token</span>,</span><br><span class="line">      <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json;charset=UTF-8&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">url</span>: api,</span><br><span class="line">    <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(reqBody),</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">request</span>(options, <span class="keyword">function</span> (<span class="params">err, response, body</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">resolve</span>([err, <span class="literal">false</span>]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (response.<span class="property">statusCode</span> != <span class="number">201</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">resolve</span>([response, <span class="literal">false</span>]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">resolve</span>([<span class="literal">false</span>, <span class="literal">true</span>]);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 写入内容</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; fileName 文件名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; content 内容</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">write</span> = <span class="keyword">async</span> (<span class="params">fileName, content, flag = <span class="string">&#x27;w+&#x27;</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.<span class="title function_">open</span>(fileName, flag, <span class="keyword">function</span> (<span class="params">err, fd</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="title function_">resolve</span>([err, <span class="literal">false</span>]);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      fs.<span class="title function_">writeFile</span>(fd, content, <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="title function_">resolve</span>([err, <span class="literal">false</span>]);</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        fs.<span class="title function_">close</span>(fd, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="title function_">resolve</span>([err, <span class="literal">false</span>]);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="title function_">resolve</span>([<span class="literal">false</span>, <span class="literal">true</span>]);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">init</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> urls = <span class="title function_">sitemapXmlReader</span>(config.<span class="property">sitemap</span>);</span><br><span class="line">  <span class="comment">// 报错的数据</span></span><br><span class="line">  <span class="keyword">const</span> errorData = [];</span><br><span class="line">  <span class="comment">// 已经初始化的数据</span></span><br><span class="line">  <span class="keyword">const</span> initializedData = [];</span><br><span class="line">  <span class="comment">// 成功初始化数据</span></span><br><span class="line">  <span class="keyword">const</span> successData = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> urls) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;</span><br><span class="line">      url,</span><br><span class="line">      date,</span><br><span class="line">      title,</span><br><span class="line">      desc</span><br><span class="line">    &#125; = item;</span><br><span class="line">    <span class="keyword">const</span> id = <span class="title function_">getGitalkId</span>(&#123;</span><br><span class="line">      url,</span><br><span class="line">      date</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">if</span> (!id) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`id: 生成失败 [ <span class="subst">$&#123;id&#125;</span> ] `</span>);</span><br><span class="line">      errorData.<span class="title function_">push</span>(&#123;</span><br><span class="line">        ...item,</span><br><span class="line">        <span class="attr">info</span>: <span class="string">&#x27;id 生成失败&#x27;</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> [err, res] = <span class="keyword">await</span> <span class="title function_">idIsInit</span>(id);</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Error: 查询评论异常 [ <span class="subst">$&#123;title&#125;</span> ] , 信息：`</span>, err || <span class="string">&#x27;无&#x27;</span>);</span><br><span class="line">      errorData.<span class="title function_">push</span>(&#123;</span><br><span class="line">        ...item,</span><br><span class="line">        <span class="attr">info</span>: <span class="string">&#x27;查询评论异常&#x27;</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (res === <span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="comment">// console.log(`--- Gitalk 已经初始化 --- [ $&#123;title&#125; ] `);</span></span><br><span class="line">      initializedData.<span class="title function_">push</span>(&#123;</span><br><span class="line">        id,</span><br><span class="line">        url,</span><br><span class="line">        title,</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Gitalk 初始化开始... [ <span class="subst">$&#123;title&#125;</span> ] `</span>);</span><br><span class="line">    <span class="keyword">const</span> [e, r] = <span class="keyword">await</span> <span class="title function_">gitalkInit</span>(&#123;</span><br><span class="line">      id,</span><br><span class="line">      url,</span><br><span class="line">      title,</span><br><span class="line">      desc</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">if</span> (e || !r) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Error: Gitalk 初始化异常 [ <span class="subst">$&#123;title&#125;</span> ] , 信息：`</span>, e || <span class="string">&#x27;无&#x27;</span>);</span><br><span class="line">      errorData.<span class="title function_">push</span>(&#123;</span><br><span class="line">        ...item,</span><br><span class="line">        <span class="attr">info</span>: <span class="string">&#x27;初始化异常&#x27;</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    successData.<span class="title function_">push</span>(&#123;</span><br><span class="line">      id,</span><br><span class="line">      url,</span><br><span class="line">      title,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Gitalk 初始化成功! [ <span class="subst">$&#123;title&#125;</span> ] - <span class="subst">$&#123;id&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;&#x27;</span>); <span class="comment">// 空输出，用于换行</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;--------- 运行结果 ---------&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;&#x27;</span>); <span class="comment">// 空输出，用于换行</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (errorData.<span class="property">length</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`报错数据： <span class="subst">$&#123;errorData.length&#125;</span> 条。参考文件 <span class="subst">$&#123;config.gitalkErrorFile&#125;</span>。`</span>);</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">write</span>(config.<span class="property">gitalkErrorFile</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(errorData, <span class="literal">null</span>, <span class="number">2</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`本次成功： <span class="subst">$&#123;successData.length&#125;</span> 条。`</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 写入缓存</span></span><br><span class="line">  <span class="keyword">if</span> (config.<span class="property">cache</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`写入缓存： <span class="subst">$&#123;(initializedData.length + successData.length)&#125;</span> 条，已初始化 <span class="subst">$&#123;initializedData.length&#125;</span> 条，本次成功： <span class="subst">$&#123;successData.length&#125;</span> 条。参考文件 <span class="subst">$&#123;config.gitalkCacheFile&#125;</span>。`</span>);</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">write</span>(config.<span class="property">gitalkCacheFile</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(initializedData.<span class="title function_">concat</span>(successData), <span class="literal">null</span>, <span class="number">2</span>));</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`已初始化： <span class="subst">$&#123;initializedData.length&#125;</span> 条。`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">init</span>();</span><br></pre></td></tr></table></figure><ul><li>修改 package.json 中 scripts 中的脚本,添加 “gitalk”:”node talk-auto-init.js”.</li></ul>   <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">   <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo generate&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;clean&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo clean&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;deploy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo deploy&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;server&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo server&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;publish&quot;</span><span class="punctuation">:</span> <span class="string">&quot;git push &amp;&amp; hexo clean &amp;&amp; hexo generate -deploy&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;gitalk&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node talk-auto-init.js&quot;</span></span><br><span class="line">   <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>测试 gitalk.</li></ul><pre><code>npm run talk</code></pre><ul><li>已经缓存过后的结果:</li></ul><pre><code>&gt; hexo-site@0.0.0 gitalk&gt; node talk-auto-init.js--------- 运行结果 ---------本次成功： 0 条。写入缓存： 7 条，已初始化 7 条，本次成功： 0 条。参考文件 /Users/yinwk/keryi/white-than-wood.github.io/gitalk-init-cache.json.</code></pre><blockquote><p>proxy 403错误</p></blockquote><ul><li><p>nginx 解决方案(推荐).</p><p>在 nginx 的博客配置中加入如下内容(注意自己博客的域名必须经过 https ssl 安全证书备案, Github Pages 不支持自定义域名添加 SSL 证书,要想使用此解决方案,必须使用自己申请的域名,并且通过 https ssl 安全证书备案,最后在 Github 以及申请和管理域名的平台上设置自定义域名):</p></li></ul>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl http2;</span><br><span class="line">    #...</span><br><span class="line">    location = /login/oauth/access_token &#123;</span><br><span class="line">        add_header Access-Control-Allow-Origin &#x27;https://white-than-wood.zone/&#x27;;  //这里改成你自己的域名,并删除注释</span><br><span class="line">        add_header Access-Control-Allow-Methods &#x27;GET, POST, OPTIONS&#x27;;</span><br><span class="line">        add_header Access-Control-Allow-Headers &#x27;DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization&#x27;;</span><br><span class="line">        if ($request_method = &#x27;OPTIONS&#x27;) &#123;</span><br><span class="line">              return 204;</span><br><span class="line">        &#125;</span><br><span class="line">        proxy_pass https://github.com;</span><br><span class="line">    &#125;</span><br><span class="line">    #...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>自建一个 workers.</p><p>地址: <a href='https://workers.cloudflare.com/'>CloudFlare Workers</a>.<br>参考文章: <a href='https://blog.dsrkafuu.net/post/2020/cloudflare-worker-cors-anywhere/'>使用 CloudFlare Workers 实现 CORS Anywhere</a>.</p></li><li><p>使用其他人搭建的代理.</p><p>比如这个 <a href='https://github.com/gitalk/gitalk/issues/429#issuecomment-778291781'>issues</a> 介绍到的:</p><pre><code> proxy: https://shielded-brushlands-08810.herokuapp.com/https://github.com/login/oauth/access_token</code></pre></li></ul><h4 id="hexo-其他配置"><a href="#hexo-其他配置" class="headerlink" title="hexo 其他配置"></a>hexo 其他配置</h4><blockquote><p>示例</p></blockquote><p>  更改根目录底下的 _config.yml 文件,更改网站title(标题)、author(作者)、keywords(关键字)、description(描述)配置,比如本人的配置.</p><pre><code>title: WTW&#39;s Frontendauthor: WTW(比木白)keywords: hexo,hexo-cli,hexo博客,hexo博客个人网站,hexo blogsubtitle: 道阻且长,行则将至description: 前端领域内所不知道的都探索于此!</code></pre><p>  更改主题目录底下的 _config.yml 文件,设置个人的github(github托管代码网址)、google(google个人资料网址)、gmail(gmail邮箱网址)、twitter(twitter个人微博网址)等等,比如本人的配置.</p><pre><code>social:  GitHub: https://github.com/white-than-wood || fab fa-github  E-Mail: https://dreamthen.00@gmail.com || fab fa-envelope  Google: https://plus.google.com/u/0/103833130011211353424 || fab fa-google</code></pre><p>  发布到 GitHub Page 上之后,你会发现 README.md 莫名的消失,主要是因为 hexo 构建发布到远程的目录只是 source 目录,所以只要将 README.md copy 一份放到 source 目录下,并且配置渲染时跳过的 markdown 类型文件就可以了.</p><pre><code>#hexo构建渲染时会将source目录下markdown类型文件转译为html,我们不需要将README.md转译,所以直接skip render#更改根目录底下的_config.yml文件,修改skip_render属性skip_render: README.md</code></pre><p>  当创作中图片过小,阅读者无法看清的情况下,放大配置就已然成为必要 .fancybox 配置可以点击使图片放大,并可同时查看全文的图片.更改主题目录下的 _config.yml 文件 fancybox 属性.</p><pre><code># FancyBox is a tool that offers a nice and elegant way to add zooming functionality for images.# For more information: https://fancyapps.com/fancybox/fancybox: true</code></pre>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> blog </tag>
            
            <tag> next themes </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
